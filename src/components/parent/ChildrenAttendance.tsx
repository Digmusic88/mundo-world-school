import React, { useState, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Progress } from '@/components/ui/progress';
import { 
  UserCheck, 
  UserX, 
  Clock, 
  Calendar as CalendarIcon,
  TrendingUp,
  TrendingDown,
  AlertTriangle,
  CheckCircle,
  BarChart3,
  Download,
  Filter,
  Eye
} from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useAttendance, useUsers, useGroups } from '@/hooks/useData';\n\nconst ChildrenAttendance: React.FC = () => {\n  const { user } = useAuth();\n  const { attendance } = useAttendance();\n  const { users } = useUsers();\n  const { groups } = useGroups();\n  const [selectedChild, setSelectedChild] = useState('all');\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth().toString());\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear().toString());\n  const [viewMode, setViewMode] = useState('summary'); // summary, detailed, calendar\n\n  // Obtener hijos del padre\n  const children = useMemo(() => {\n    return users.filter(u => \n      u.role === 'student' && \n      u.parent_id === user?.id\n    );\n  }, [users, user]);\n\n  // Filtrar registros de asistencia por hijos y período\n  const filteredAttendance = useMemo(() => {\n    let records = attendance.filter(record => \n      children.some(child => child.id === record.student_id)\n    );\n\n    if (selectedChild !== 'all') {\n      records = records.filter(record => record.student_id === selectedChild);\n    }\n\n    // Filtrar por mes y año\n    records = records.filter(record => {\n      const date = new Date(record.date);\n      return date.getMonth() === parseInt(selectedMonth) && \n             date.getFullYear() === parseInt(selectedYear);\n    });\n\n    return records;\n  }, [attendance, children, selectedChild, selectedMonth, selectedYear]);\n\n  // Calcular estadísticas por hijo\n  const childrenStats = useMemo(() => {\n    return children.map(child => {\n      const childRecords = filteredAttendance.filter(r => r.student_id === child.id);\n      const totalDays = childRecords.length;\n      const presentDays = childRecords.filter(r => r.status === 'present').length;\n      const absentDays = childRecords.filter(r => r.status === 'absent').length;\n      const lateDays = childRecords.filter(r => r.status === 'late').length;\n      const excusedDays = childRecords.filter(r => r.status === 'excused').length;\n      \n      const attendanceRate = totalDays > 0 ? (presentDays / totalDays) * 100 : 0;\n      \n      // Obtener información del grupo\n      const childGroup = groups.find(g => g.students.includes(child.id));\n      \n      return {\n        ...child,\n        group: childGroup,\n        stats: {\n          totalDays,\n          presentDays,\n          absentDays,\n          lateDays,\n          excusedDays,\n          attendanceRate: Math.round(attendanceRate * 10) / 10\n        },\n        records: childRecords\n      };\n    });\n  }, [children, filteredAttendance, groups]);\n\n  // Estadísticas generales\n  const overallStats = useMemo(() => {\n    const totalRecords = filteredAttendance.length;\n    const presentCount = filteredAttendance.filter(r => r.status === 'present').length;\n    const absentCount = filteredAttendance.filter(r => r.status === 'absent').length;\n    const lateCount = filteredAttendance.filter(r => r.status === 'late').length;\n    const excusedCount = filteredAttendance.filter(r => r.status === 'excused').length;\n    \n    const overallRate = totalRecords > 0 ? (presentCount / totalRecords) * 100 : 0;\n    \n    return {\n      totalRecords,\n      presentCount,\n      absentCount,\n      lateCount,\n      excusedCount,\n      overallRate: Math.round(overallRate * 10) / 10\n    };\n  }, [filteredAttendance]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'present': return 'bg-green-100 text-green-800';\n      case 'absent': return 'bg-red-100 text-red-800';\n      case 'late': return 'bg-yellow-100 text-yellow-800';\n      case 'excused': return 'bg-blue-100 text-blue-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'present': return <UserCheck className=\"h-4 w-4\" />;\n      case 'absent': return <UserX className=\"h-4 w-4\" />;\n      case 'late': return <Clock className=\"h-4 w-4\" />;\n      case 'excused': return <CheckCircle className=\"h-4 w-4\" />;\n      default: return <UserCheck className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'present': return 'Presente';\n      case 'absent': return 'Ausente';\n      case 'late': return 'Tardanza';\n      case 'excused': return 'Justificado';\n      default: return status;\n    }\n  };\n\n  const getAttendanceColor = (rate: number) => {\n    if (rate >= 95) return 'text-green-600';\n    if (rate >= 85) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-ES', {\n      weekday: 'short',\n      day: '2-digit',\n      month: '2-digit'\n    });\n  };\n\n  const months = [\n    'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',\n    'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'\n  ];\n\n  const currentYear = new Date().getFullYear();\n  const years = [currentYear - 1, currentYear, currentYear + 1];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Asistencia de mis Hijos</h2>\n          <p className=\"text-gray-600\">Seguimiento detallado de la asistencia escolar</p>\n        </div>\n        <Button variant=\"outline\">\n          <Download className=\"mr-2 h-4 w-4\" />\n          Descargar Reporte\n        </Button>\n      </div>\n\n      {/* Filtros */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Select value={selectedChild} onValueChange={setSelectedChild}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Seleccionar hijo\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos los hijos</SelectItem>\n                  {children.map((child) => (\n                    <SelectItem key={child.id} value={child.id}>\n                      {child.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Select value={selectedMonth} onValueChange={setSelectedMonth}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Mes\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {months.map((month, index) => (\n                    <SelectItem key={index} value={index.toString()}>\n                      {month}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Select value={selectedYear} onValueChange={setSelectedYear}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Año\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {years.map((year) => (\n                    <SelectItem key={year} value={year.toString()}>\n                      {year}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Select value={viewMode} onValueChange={setViewMode}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Vista\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"summary\">Resumen</SelectItem>\n                  <SelectItem value=\"detailed\">Detallado</SelectItem>\n                  <SelectItem value=\"calendar\">Calendario</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Estadísticas generales */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Tasa General</p>\n                <p className={`text-2xl font-bold ${getAttendanceColor(overallStats.overallRate)}`}>\n                  {overallStats.overallRate}%\n                </p>\n              </div>\n              <BarChart3 className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Días Presentes</p>\n                <p className=\"text-2xl font-bold text-green-600\">{overallStats.presentCount}</p>\n              </div>\n              <UserCheck className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Ausencias</p>\n                <p className=\"text-2xl font-bold text-red-600\">{overallStats.absentCount}</p>\n              </div>\n              <UserX className=\"h-8 w-8 text-red-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Tardanzas</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">{overallStats.lateCount}</p>\n              </div>\n              <Clock className=\"h-8 w-8 text-yellow-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Vista por hijo */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {childrenStats.map((childData) => (\n          <Card key={childData.id}>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"h-12 w-12\">\n                    <AvatarImage src={childData.avatar} />\n                    <AvatarFallback>\n                      {childData.name.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <CardTitle className=\"text-lg\">{childData.name}</CardTitle>\n                    <CardDescription>\n                      {childData.group?.name} • {childData.student_id}\n                    </CardDescription>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className={`text-2xl font-bold ${getAttendanceColor(childData.stats.attendanceRate)}`}>\n                    {childData.stats.attendanceRate}%\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Asistencia</div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {/* Barra de progreso */}\n                <div>\n                  <div className=\"flex justify-between text-sm mb-2\">\n                    <span>Meta: 95%</span>\n                    <span>{childData.stats.attendanceRate}%</span>\n                  </div>\n                  <Progress \n                    value={childData.stats.attendanceRate} \n                    className=\"h-2\"\n                  />\n                </div>\n                \n                {/* Estadísticas detalladas */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-3 bg-green-50 rounded\">\n                    <div className=\"text-xl font-bold text-green-600\">{childData.stats.presentDays}</div>\n                    <div className=\"text-xs text-gray-600\">Presentes</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-red-50 rounded\">\n                    <div className=\"text-xl font-bold text-red-600\">{childData.stats.absentDays}</div>\n                    <div className=\"text-xs text-gray-600\">Ausencias</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-yellow-50 rounded\">\n                    <div className=\"text-xl font-bold text-yellow-600\">{childData.stats.lateDays}</div>\n                    <div className=\"text-xs text-gray-600\">Tardanzas</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-blue-50 rounded\">\n                    <div className=\"text-xl font-bold text-blue-600\">{childData.stats.excusedDays}</div>\n                    <div className=\"text-xs text-gray-600\">Justificados</div>\n                  </div>\n                </div>\n\n                {/* Alertas */}\n                {childData.stats.attendanceRate < 85 && (\n                  <div className=\"flex items-center space-x-2 p-3 bg-red-50 rounded\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                    <span className=\"text-sm text-red-700\">\n                      Asistencia por debajo del mínimo requerido (85%)\n                    </span>\n                  </div>\n                )}\n                \n                {childData.stats.lateDays > 3 && (\n                  <div className=\"flex items-center space-x-2 p-3 bg-yellow-50 rounded\">\n                    <Clock className=\"h-4 w-4 text-yellow-500\" />\n                    <span className=\"text-sm text-yellow-700\">\n                      Muchas tardanzas este período ({childData.stats.lateDays})\n                    </span>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Vista detallada */}\n      {viewMode === 'detailed' && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Registro Detallado de Asistencia</CardTitle>\n            <CardDescription>\n              {months[parseInt(selectedMonth)]} {selectedYear}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Fecha</TableHead>\n                  <TableHead>Estudiante</TableHead>\n                  <TableHead>Grupo</TableHead>\n                  <TableHead>Estado</TableHead>\n                  <TableHead>Observaciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredAttendance\n                  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n                  .map((record) => {\n                    const student = users.find(u => u.id === record.student_id);\n                    const group = groups.find(g => g.students.includes(record.student_id));\n                    \n                    return (\n                      <TableRow key={`${record.student_id}-${record.date}`}>\n                        <TableCell>{formatDate(record.date)}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Avatar className=\"h-6 w-6\">\n                              <AvatarImage src={student?.avatar} />\n                              <AvatarFallback>\n                                {student?.name.split(' ').map(n => n[0]).join('')}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"text-sm\">{student?.name}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>{group?.name}</TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(record.status)}>\n                            {getStatusIcon(record.status)}\n                            <span className=\"ml-1\">{getStatusLabel(record.status)}</span>\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm text-gray-600\">\n                            {record.notes || '-'}\n                          </span>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default ChildrenAttendance;"
